// public/apps/puzzles/js/gameLoader.js - FINAL CORRECTED VERSION

import * as Renderer from './flowRenderer.js'; 
import * as DslParser from './dslParser.js'; 
import { highlightNextSlot, clearAllHighlights } from './puzzleGuide.js'; // âœ… CRITICAL: Import for the new guidance logic

const gameSelector = document.getElementById('game-selector');
const loadGameBtn = document.getElementById('load-game-btn');
const gridContainer = document.getElementById('grid-container');

// Global object to store the current game's solution data and tracking current placement
window.currentGameConfig = null;

// State variables for the puzzle guide
let lastCorrectElementId = 0; 
let currentPuzzleDSL = ''; 

// --- UTILITY: Fisher-Yates shuffle algorithm (UNCHANGED) ---
function shuffleArray(array) {
Â  Â  for (let i = array.length - 1; i > 0; i--) {
Â  Â  Â  Â  const j = Math.floor(Math.random() * (i + 1));
Â  Â  Â  Â  [array[i], array[j]] = [array[j], array[i]];
Â  Â  }
Â  Â  return array;
}

// --- 1. HARDCODED GAME LIST (UNCHANGED) ---
const AVAILABLE_GAMES = [
Â  Â  { fileName: 'state_change.dsl', displayName: 'State Change' },
Â  Â  { fileName: 'view_state.dsl', displayName: 'View Change' },
Â  Â  { fileName: 'automation.dsl', displayName: 'Automation' },
Â  Â  { fileName: 'simple.dsl', displayName: 'Simple Puzzle' },
Â  Â  { fileName: 'doable.dsl', displayName: 'Doable Puzzle' },
];

function populateGameList() {
Â  Â  AVAILABLE_GAMES.forEach(game => {
Â  Â  Â  Â  const option = document.createElement('option');
Â  Â  Â  Â  option.value = game.fileName;
Â  Â  Â  Â  option.textContent = game.displayName;
Â  Â  Â  Â  gameSelector.appendChild(option);
Â  Â  });

Â  Â  if (AVAILABLE_GAMES.length > 0) {
Â  Â  Â  Â  loadGame(AVAILABLE_GAMES[0].fileName);
Â  Â  }
}

function isTestMode() {
Â  Â  const path = window.location.pathname.toLowerCase();
Â  Â  return path.endsWith('index.html') || path.endsWith('/'); 
}


// --- 2. Load Selected Game ---
async function loadGame(dslFileName) {
Â  Â  if (!dslFileName) return;
Â  Â  
Â  Â  console.log(`[GameLoader] Attempting to load DSL: ${dslFileName}`);

Â  Â  try {
Â  Â  Â  Â  const dslPath = `./games/${dslFileName}`; 
Â  Â  Â  Â  const response = await fetch(dslPath);
Â  Â  Â  Â  
Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  throw new Error(`Failed to load ${dslFileName}: ${response.statusText}.`);
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const dslContent = await response.text();
        currentPuzzleDSL = dslContent; 

Â  Â  Â  Â  // --- DSL Structuring ---
Â  Â  Â  Â  const gameConfig = structureGameConfig(dslContent); 

Â  Â  Â  Â  if (gameConfig.errors.length > 0) {
Â  Â  Â  Â  Â  Â  console.error("[GameLoader] DSL Parsing Errors:", gameConfig.errors);
Â  Â  Â  Â  Â  Â  alert(`Failed to load game: ${gameConfig.errors.length} parsing errors. See console.`);
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  window.currentGameConfig = gameConfig;
Â  Â  Â  Â  
Â  Â  Â  Â  console.log(`[GameLoader] Game config loaded successfully. Columns: ${gameConfig.columns}, Pieces: ${gameConfig.availablePieces.length}`);

Â  Â  Â  Â  // 1. Reset state
Â  Â  Â  Â  Renderer.resetState();
        lastCorrectElementId = 0; // Reset puzzle guide progress
        clearAllHighlights(); // Clear previous highlights

Â  Â  Â  Â  // 2. Create the grid 
Â  Â  Â  Â  Renderer.createGrid(gridContainer, gameConfig.columns);
Â  Â  Â  Â  
Â  Â  Â  Â  // 3. Render the available pieces in the tray
Â  Â  Â  Â  const pieceTray = document.getElementById('piece-tray');
Â  Â  Â  Â  const shuffledPieces = shuffleArray([...gameConfig.availablePieces]);
Â  Â  Â  Â  Renderer.renderAvailablePieces(pieceTray, shuffledPieces);
Â  Â  Â  Â  
Â  Â  Â  Â  // 4. CONNECTION DISPLAY LOGIC 
Â  Â  Â  Â  if (isTestMode()) {
Â  Â  Â  Â  Â  Â  Renderer.setConnections(gameConfig.solutionConnections);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Renderer.setConnections([]);
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // 5. Render the set connections
Â  Â  Â  Â  const svgElement = document.getElementById('flow-svg');
Â  Â  Â  Â  if (svgElement) {
Â  Â  Â  Â  Â  Â  Renderer.renderArrows(svgElement);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  console.error("[GameLoader] CRITICAL ERROR: SVG element #flow-svg not found during load!");
Â  Â  Â  Â  }
        
        // 6. ðŸ§© INITIAL HIGHLIGHT: Guide the user to the first step
        highlightNextSlot(currentPuzzleDSL, lastCorrectElementId); 

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error(`[GameLoader] Error loading game: ${dslFileName}`, error);
Â  Â  }
}


// --- 3. DSL Structuring Function (Corrected Piece ID and Added DSL ID) ---
function structureGameConfig(dslContent) {
Â  Â  const { items, rawFlows, errors } = DslParser.parseDSL(dslContent);
Â  Â  const { connections } = DslParser.resolveConnections(items, rawFlows);
Â  Â  
Â  Â  let maxColumn = 0;
Â  Â  items.forEach(item => {
Â  Â  Â  Â  if (item.c > maxColumn) {
Â  Â  Â  Â  Â  Â  maxColumn = item.c;
Â  Â  Â  Â  }
Â  Â  });

    // âœ… FIX: Maintain original piece ID format (p0, p1, etc.) for the tray pieces
Â  Â  const availablePieces = items.map((item, index) => ({
Â  Â  Â  Â  id: `p${index}`, 
Â  Â  Â  Â  type: item.type,
Â  Â  Â  Â  name: item.name
Â  Â  }));

Â  Â  const solutionMap = {};
Â  Â  items.forEach(item => {
Â  Â  Â  Â  solutionMap[`${item.r}_${item.c}`] = { 
            type: item.type, 
            name: item.name,
            dslId: item.id // Stores the DSL ID (e.g., 1, 2, 3) for the guide
        };
Â  Â  });

Â  Â  const config = {
Â  Â  Â  Â  columns: maxColumn > 0 ? maxColumn : 1, 
Â  Â  Â  Â  availablePieces: availablePieces,
Â  Â  Â  Â  solutionConnections: connections,
Â  Â  Â  Â  solutionMap: solutionMap,
Â  Â  Â  Â  errors: errors,
        dslContent: dslContent 
Â  Â  };

Â  Â  console.log("[GameLoader] Parsed Game Config:", config);
Â  Â  return config;
}

// --- 4. Event Listeners and Initialization (UNCHANGED) ---
loadGameBtn.addEventListener('click', () => {
Â  Â  const selectedFile = gameSelector.value;
Â  Â  loadGame(selectedFile);
});

// Run on page load
populateGameList();


// --- 5. PUZZLE SOLVER STUB (Modified for Highlighting) ---
window.checkPuzzleState = function() {
Â  Â  const currentPieces = Renderer.getPieces();
Â  Â  
Â  Â  if (!window.currentGameConfig) {
Â  Â  Â  Â  console.error("--- checkPuzzleState START FAILED: currentGameConfig is null ---");
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  
Â  Â  const solutionMap = window.currentGameConfig.solutionMap;
Â  Â  const solutionConnections = window.currentGameConfig.solutionConnections;
Â  Â  
Â  Â  const requiredPlacements = Object.keys(solutionMap).length;
Â  Â  let correctPlacements = 0;
Â  Â  let highestCorrectDslId = 0; 

Â  Â  console.log("--- checkPuzzleState START ---");
Â  Â  
Â  Â  // --- 1. Identify Correct Placements and find the highest correct DSL ID ---
Â  Â  const correctPlacementKeys = {}; 
Â  Â  for (const key in currentPieces) {
Â  Â  Â  Â  const placedPiece = currentPieces[key];
Â  Â  Â  Â  const requiredPiece = solutionMap[key];
Â  Â  Â  Â  
Â  Â  Â  Â  // Check Type AND Name
Â  Â  Â  Â  if (requiredPiece && 
Â  Â  Â  Â  Â  Â  placedPiece.type === requiredPiece.type &&
Â  Â  Â  Â  Â  Â  placedPiece.name === requiredPiece.name) { 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  correctPlacements++;
Â  Â  Â  Â  Â  Â  correctPlacementKeys[key] = true;
            
            // Track the highest DSL ID placed correctly
            if (requiredPiece.dslId > highestCorrectDslId) {
                highestCorrectDslId = requiredPiece.dslId;
            }
Â  Â  Â  Â  }
Â  Â  }
Â  Â  
    // Update the state for the puzzle guide
    lastCorrectElementId = highestCorrectDslId;

Â  Â  // --- 2. Resolve Visible Connections (Arrows) ---
Â  Â  const visibleConnections = [];
Â  Â  solutionConnections.forEach((conn) => {
Â  Â  Â  Â  const startKey = conn.start; 
Â  Â  Â  Â  const endKey = conn.end; 
Â  Â  Â  Â  
Â  Â  Â  Â  const isStartCorrect = correctPlacementKeys[startKey];
Â  Â  Â  Â  const isEndCorrect = correctPlacementKeys[endKey];
Â  Â  Â  Â  
Â  Â  Â  Â  if (isStartCorrect && isEndCorrect) {
Â  Â  Â  Â  Â  Â  visibleConnections.push(conn);
Â  Â  Â  Â  }
Â  Â  });
Â  Â  
Â  Â  // --- 3. Render Connections ---
Â  Â  Renderer.setConnections(visibleConnections);
Â  Â  const svgElement = document.getElementById('flow-svg');
Â  Â  if (svgElement) {
Â  Â  Â  Â  Renderer.renderArrows(svgElement);
Â  Â  } else {
Â  Â  Â  Â  console.error("[Renderer] CRITICAL ERROR: SVG element #flow-svg not found during checkPuzzleState!");
Â  Â  }
Â  Â  
Â  Â  // --- 4. Check for Full Solution and Guide Next Step ---
Â  Â  if (correctPlacements === requiredPlacements && 
Â  Â  Â  Â  Object.keys(currentPieces).length === requiredPlacements) {
Â  Â  Â  Â  
Â  Â  Â  Â  console.log("PUZZLE SOLVED! ðŸŽ‰");
        clearAllHighlights(); // Remove final highlight
Â  Â  Â  Â  
Â  Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  Â  Â  alert("Congratulations! Puzzle Solved!");
Â  Â  Â  Â  }, 100); 

Â  Â  } else {
        // ðŸ§© GUIDE: Highlight the next element based on the highest correct piece placed
        highlightNextSlot(window.currentGameConfig.dslContent, lastCorrectElementId); 
Â  Â  Â  Â  console.log(`[State] Puzzle state: ${Object.keys(currentPieces).length} placed. ${correctPlacements}/${requiredPlacements} correct.`);
Â  Â  }

Â  Â  console.log("--- checkPuzzleState END ---");
}